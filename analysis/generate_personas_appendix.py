#!/usr/bin/env python3
"""Generate a LaTeX appendix file enumerating personas.

Reads personas from personas.json and writes articles/appendix_personas.tex
containing a numbered list (enumerate) of personas using their original
zero-based indices as list numbers.

Usage:
  python analysis/generate_personas_appendix.py [--start 0] [--max 60] [--output articles/appendix_personas.tex]
"""

from __future__ import annotations

import argparse
import json
from pathlib import Path


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description=__doc__)
    p.add_argument("--personas", type=Path, default=Path("personas.json"), help="Path to personas.json")
    p.add_argument(
        "--output",
        type=Path,
        default=Path("articles") / "appendix_personas.tex",
        help="Where to write the LaTeX file",
    )
    p.add_argument("--start", type=int, default=0, help="Start index in personas.json (default: 0)")
    p.add_argument("--max", type=int, default=60, help="Maximum number of personas to include (default: 60)")
    return p.parse_args()


def latex_escape(s: str) -> str:
    return (
        s.replace("\\", r"\textbackslash{}")
        .replace("_", r"\_")
        .replace("%", r"\%")
        .replace("&", r"\&")
        .replace("#", r"\#")
        .replace("$", r"\$")
        .replace("{", r"\{")
        .replace("}", r"\}")
    )


def main() -> None:
    args = parse_args()
    personas = json.loads(args.personas.read_text(encoding="utf-8"))
    if not isinstance(personas, list):
        raise SystemExit("personas.json must be a JSON array of strings")

    start = max(0, int(args.start))
    total = len(personas)
    if start >= total:
        raise SystemExit(f"Start index {start} is out of range (0..{total-1})")
    n = min(int(args.max), total - start)

    lines: list[str] = []
    lines.append("% Auto-generated by analysis/generate_personas_appendix.py")
    lines.append("\\begin{enumerate}")
    lines.append(f"\\setcounter{{enumi}}{{{start-1}}}")
    for i in range(start, start + n):
        text = latex_escape(str(personas[i]).strip())
        if not text:
            continue
        lines.append(f"  \\item {text}")
    lines.append("\\end{enumerate}")

    args.output.parent.mkdir(parents=True, exist_ok=True)
    args.output.write_text("\n".join(lines) + "\n", encoding="utf-8")


if __name__ == "__main__":
    main()
