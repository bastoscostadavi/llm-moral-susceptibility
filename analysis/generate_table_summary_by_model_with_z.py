#!/usr/bin/env python3
"""Generate the LaTeX table summarizing model robustness/susceptibility with z-scores."""

from __future__ import annotations

import argparse
import math
from pathlib import Path

import pandas as pd


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--metrics",
        type=Path,
        default=Path("results") / "moral_metrics.csv",
        help="Path to the overall metrics CSV (default: results/moral_metrics.csv).",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("articles") / "table_summary_by_model_with_z.tex",
        help="Where to write the LaTeX table (default: articles/table_summary_by_model_with_z.tex).",
    )
    return parser.parse_args()


def ensure_columns(frame: pd.DataFrame, required: set[str]) -> None:
    missing = required.difference(frame.columns)
    if missing:
        raise ValueError(f"Metrics CSV missing required columns: {', '.join(sorted(missing))}")


def compute_z_scores(frame: pd.DataFrame, value_col: str, error_col: str) -> pd.DataFrame:
    values = frame[value_col].to_numpy(dtype=float)
    mean = float(values.mean())
    std = float(values.std(ddof=0))
    if math.isclose(std, 0.0):
        raise ValueError(f"Cannot compute z-score for {value_col}: zero variance across models.")

    z_col = f"{value_col}_z"
    z_err_col = f"{value_col}_z_uncertainty"
    frame[z_col] = (frame[value_col] - mean) / std
    frame[z_err_col] = frame[error_col] / std
    return frame


def round_sig(x: float, sig: int = 1) -> float:
    if not math.isfinite(x):
        return float("nan")
    if x == 0:
        return 0.0
    power = -int(math.floor(math.log10(abs(x)))) + (sig - 1)
    return round(x, power)


def format_value_with_uncertainty(value: float, err: float) -> str:
    if not math.isfinite(value):
        return "--"
    if not math.isfinite(err) or err <= 0:
        return f"{value:.3f}"

    err_abs = round_sig(abs(err), 1)
    if err_abs == 0:
        return f"{value:.3f}"

    exp = int(math.floor(math.log10(err_abs))) if err_abs > 0 else 0
    decimals = max(0, -exp)
    value_rounded = round(value, decimals)

    if decimals == 0:
        value_str = f"{int(round(value_rounded))}"
        err_str = f"{int(round(err_abs))}"
    else:
        value_str = f"{value_rounded:.{decimals}f}"
        err_str = f"{err_abs:.{decimals}f}"
    return f"{value_str}\\pm{err_str}"


def latex_escape(text: str) -> str:
    return text.replace("_", r"\_")


def main() -> None:
    args = parse_args()

    if not args.metrics.exists():
        raise FileNotFoundError(f"Metrics CSV not found: {args.metrics}")

    df = pd.read_csv(args.metrics)
    ensure_columns(
        df,
        {
            "model",
            "robustness",
            "robustness_uncertainty",
            "susceptibility",
            "susceptibility_uncertainty",
        },
    )

    df = df.sort_values("model").reset_index(drop=True)
    df = compute_z_scores(df, "robustness", "robustness_uncertainty")
    df = compute_z_scores(df, "susceptibility", "susceptibility_uncertainty")

    lines: list[str] = []
    lines.append("% Auto-generated by analysis/generate_table_summary_by_model_with_z.py")
    lines.append("\\begin{table*}[t]")
    lines.append("  \\centering")
    lines.append(
        "  \\caption{Overall susceptibility and robustness by model with z-scores (mean $\\pm$ SE; $Z$ computed across models).}"
    )
    lines.append("  \\label{tab:summary_by_model_with_z}")
    lines.append("  \\begin{tabular}{lcccc}")
    lines.append("    \\toprule")
    header = "    Model & Robustness ($\pm$) & Robustness $Z$ ($\pm$) & "
    header += "Susceptibility ($\pm$) & Susceptibility $Z$ ($\pm$) \\"
    lines.append(header)
    lines.append("    \\midrule")

    for _, row in df.iterrows():
        model = latex_escape(str(row["model"]))
        rob = format_value_with_uncertainty(row["robustness"], row["robustness_uncertainty"])
        rob_z = format_value_with_uncertainty(row["robustness_z"], row["robustness_z_uncertainty"])
        sus = format_value_with_uncertainty(row["susceptibility"], row["susceptibility_uncertainty"])
        sus_z = format_value_with_uncertainty(row["susceptibility_z"], row["susceptibility_z_uncertainty"])
        row = f"    {model} & ${rob}$ & ${rob_z}$ & ${sus}$ & ${sus_z}$ \\"
        lines.append(row)

    lines.append("    \\bottomrule")
    lines.append("  \\end{tabular}")
    lines.append("\\end{table*}")

    args.output.parent.mkdir(parents=True, exist_ok=True)
    args.output.write_text("\n".join(lines) + "\n", encoding="utf-8")


if __name__ == "__main__":
    main()
